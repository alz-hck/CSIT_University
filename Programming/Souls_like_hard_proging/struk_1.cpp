#include <iostream>    
#include <fstream>   
#include <string>    
#include <sstream>   
#include <iomanip>    
#include <ctime>      

using namespace std;   

// Структура для хранения информации о туристе
struct T {
    string n; // ФИО туриста
    string a; // Дата прибытия
    string d; // Дата отъезда
};

// Функция для проверки корректности даты
bool v(const string& date) {
    // Проверяем, что строка даты имеет длину 10 символов и содержит '-' на нужных позициях
    if (date.size() != 10 || date[4] != '-' || date[7] != '-') {
        return false; // Если формат неверный, возвращаем false
    }
    
    // Извлекаем год, месяц и день из строки даты
    int y = stoi(date.substr(0, 4)); // Год
    int m = stoi(date.substr(5, 2));  // Месяц
    int day = stoi(date.substr(8, 2)); // День

    // Проверка на корректность месяца
    if (m < 1 || m > 12) return false; // Если месяц вне диапазона 1-12, возвращаем false

    // Проверка на корректность дня
    int dim; // Переменная для хранения количества дней в месяце
    if (m == 2) {
        // Учитываем високосный год
        dim = (y % 4 == 0 && y % 100 != 0) || (y % 400 == 0) ? 29 : 28; // 29 дней в феврале в високосный год, иначе 28
    } else if (m == 4 || m == 6 || m == 9 || m == 11) {
        dim = 30; // 30 дней в апреле, июне, сентябре и ноябре
    } else {
        dim = 31; // 31 день в остальных месяцах
    }
    // Проверяем, что день корректен
    return day >= 1 && day <= dim; // Возвращаем true, если день в допустимом диапазоне
}

// Функция для вычисления разницы в днях между двумя датами
int g(const string& arr, const string& dep) {
    struct tm a_tm = {}; // Структура для хранения даты прибытия
    struct tm d_tm = {}; // Структура для хранения даты отъезда
    istringstream a_ss(arr); // Создаем поток для даты прибытия
    istringstream d_ss(dep); // Создаем поток для даты отъезда
    
    // Преобразуем строки в структуры времени
    a_ss >> get_time(&a_tm, "%Y-%m-%d");
    d_ss >> get_time(&d_tm, "%Y-%m-%d");

    // Преобразуем структуры времени в time_t
    time_t a_t = mktime(&a_tm);
    time_t d_t = mktime(&d_tm);

    // Вычисляем разницу в днях и возвращаем ее
    return difftime(d_t, a_t) / (60 * 60 * 24); // Возвращаем количество дней между датами
}

int main() {
    // Открываем файл для чтения и файл для записи
    ifstream in("struk_1_input.txt");
    ofstream out("struk_1_output.txt");

    // Проверяем, успешно ли открылись файлы
    if (!in || !out) {
        cerr << "Ошибка! Тронул код там, где не надо, либо .txt файл!!!" << endl; // Выводим сообщение об ошибке
        return 1; // Завершаем программу с кодом ошибки
    }

    string line; // Переменная для хранения строки из файла
 
    while (getline(in, line)) {
        T t; // Создаем объект структуры T
        istringstream iss(line); // Создаем поток из строки
        getline(iss, t.n, ','); // Читаем ФИО до запятой
        getline(iss, t.a, ','); // Читаем дату прибытия до запятой
        getline(iss, t.d); // Читаем дату отъезда

        // Удаление всех пробелов
        t.n.erase(0, t.n.find_first_not_of(" \n\r\t")); // Удаляем пробелы слева
        t.n.erase(t.n.find_last_not_of(" \n\r\t") + 1); // Удаляем пробелы справа
        t.a.erase(0, t.a.find_first_not_of(" \n\r\t")); // Удаляем пробелы слева
        t.a.erase(t.a.find_last_not_of(" \n\r\t") + 1); // Удаляем пробелы справа
        t.d.erase(0, t.d.find_first_not_of(" \n\r\t")); // Удаляем пробелы слева
        t.d.erase(t.d.find_last_not_of(" \n\r\t") + 1); // Удаляем пробелы справа

        // Проверка корректности дат
        if (v(t.a) && v(t.d)) { // Если обе даты корректны
            int days = g(t.a, t.d); // Вычисляем разницу в днях
            if (days > 0) { // Если разница положительная
                out << t.n << " - " << days << " д" << endl; // Записываем результат в файл
            } else {
                out << t.n << " - некорректно" << endl; // Если разница не положительная, записываем сообщение об ошибке
            }
        } else {
            out << t.n << " - некорректно" << endl; // Если даты некорректны, записываем сообщение об ошибке
        }
    }

    in.close(); // Закрываем входной файл
    out.close(); // Закрываем выходной файл
    return 0; 
}

// ФИО, YYYY-MM-DD, YYYY-MM-DD
// Иванов Иван Иванович, 2024-06-01, 2024-06-10
// Петрова Пётр Петрович, 2023-07-15, 2023-07-20
// Сидоров Сидр Сидорович, 2025-08-05, 2025-08-12
// Олегов Олег Олегович, 2026-09-10, 2026-09-15
// Челов Человек Человекович, 2027-10-01, 2027-10-05