#include <iostream> 
#include <string>   

using namespace std; 

// Функция для преобразования восьмеричного числа в десятичное
int octToDec(const string& oct) {
    int dec = 0; // Инициализируем переменную для хранения десятичного значения
    for (char d : oct) { // Проходим по каждому символу строки восьмеричного числа
        // Проверяем, является ли символ допустимой восьмеричной цифрой
        if (d < '0' || d > '7') {
            throw invalid_argument("Некорректная восьмеричная строка"); // Если нет, выбрасываем исключение
        }
        // Преобразуем восьмеричную цифру в десятичную
        dec = dec * 8 + (d - '0'); // Умножаем текущее значение на 8 и добавляем новую цифру
    }
    return dec; // Возвращаем десятичное значение
}

// Функция для преобразования десятичного числа в восьмеричное
string decToOct(int dec) {
    if (dec == 0) return "0"; // Если число равно нулю, возвращаем строку "0"
    string oct = ""; // Инициализируем строку для хранения результата в восьмеричной системе
    while (dec > 0) { // Пока десятичное число больше нуля
        // Добавляем остаток от деления на 8 в начало строки
        oct = to_string(dec % 8) + oct; // Получаем последнюю восьмеричную цифру
        dec /= 8; // Делим число на 8 для перехода к следующей цифре
    }
    return oct; // Возвращаем строку с восьмеричным представлением
}

// Функция для сложения двух восьмеричных чисел
string addOct(const string& a, const string& b) {
    // Преобразуем оба числа в десятичную систему, складываем и возвращаем результат в восьмеричной системе
    return decToOct(octToDec(a) + octToDec(b));
}

// Функция для вычитания двух восьмеричных чисел
string subOct(const string& a, const string& b) {
    // Преобразуем оба числа в десятичную систему
    int dec1 = octToDec(a);
    int dec2 = octToDec(b);
    
    // Проверяем, не будет ли результат отрицательным
    if (dec1 < dec2) {
        throw invalid_argument("Результат вычитания будет отрицательным"); // Если да, выбрасываем исключение
    }
    // Возвращаем результат вычитания в восьмеричной системе
    return decToOct(dec1 - dec2);
}

// Функция для умножения двух восьмеричных чисел
string mulOct(const string& a, const string& b) {
    // Преобразуем оба числа в десятичную систему, умножаем и возвращаем результат в восьмеричной системе
    return decToOct(octToDec(a) * octToDec(b));
}

// Функция для деления двух восьмеричных чисел
void divOct(const string& a, const string& b, string& q, string& r) {
    // Преобразуем оба числа в десятичную систему
    int dec1 = octToDec(a);
    int dec2 = octToDec(b);
    
    // Проверяем, не делим ли на ноль
    if (dec2 == 0) {
        throw invalid_argument("Деление на ноль"); // Если да, выбрасываем исключение
    }
    
    // Вычисляем частное и остаток, преобразуем их в восьмеричную систему
    q = decToOct(dec1 / dec2); // Частное
    r = decToOct(dec1 % dec2); // Остаток
}

int main() {
    string oct1, oct2; // Переменные для хранения вводимых восьмеричных чисел

    cout << "Введите первое восьмеричное число: "; 
    cin >> oct1; // Ввод первого числа
    cout << "Введите второе восьмеричное число: "; 
    cin >> oct2; // Ввод второго числа

    try {
        // Выполняем арифметические операции
        string sum = addOct(oct1, oct2); // Сумма
        string diff = subOct(oct1, oct2); // Разность
        string prod = mulOct(oct1, oct2); // Произведение

        string quot, rem; // Переменные для хранения частного и остатка
        divOct(oct1, oct2, quot, rem); // Деление

        // Вывод результатов с переводом в десятичную систему
        cout << "Сумма: " << sum << " (в восьмеричной), " << octToDec(sum) << " (в десятичной)" << endl;
        cout << "Разность: " << diff << " (в восьмеричной), " << octToDec(diff) << " (в десятичной)" << endl;
        cout << "Произведение: " << prod << " (в восьмеричной), " << octToDec(prod) << " (в десятичной)" << endl;
        cout << "Частное: " << quot << " (в восьмеричной), " << octToDec(quot) << " (в десятичной)" << endl;
        cout << "Остаток: " << rem << " (в восьмеричной), " << octToDec(rem) << " (в десятичной)" << endl;

    } catch (const invalid_argument& e) {
        // Обработка исключений, если произошла ошибка
        cout << "Ошибка: " << e.what() << endl; // Выводим сообщение об ошибке
    }

    return 0;
}


// Пример:
// Первое восьмеричное 12
// Введите второе восьмеричное число: 7
// Сумма: 21 (в восьмеричной), 17 (в десятичной)
// Разность: 3 (в восьмеричной), 3 (в десятичной)
// Произведение: 106 (в восьмеричной), 70 (в десятичной)
// Частное: 1 (в восьмеричной), 1 (в десятичной)
// Остаток: 3 (в восьмеричной), 3 (в десятичной)